#include "../sparse/io.hpp"
#include "tests.hpp"

#define BOOST_TEST_MODULE test_sparse_vector

namespace mtl { namespace sparse { namespace test {

template<typename _Ty = void>
    struct vector_fixture { };

template<>
    struct vector_fixture<std::ptrdiff_t> 
    { 
      vector<std::ptrdiff_t> v;
      vector_fixture_a()
        : v( { 1, 2, 2, 4, 5, 6, 7, 8, 9 } )
      { }
    };

BOOST_FIXTURE_TEST_CASE( test_sparse_vector, vector_fixture<std::ptrdiff_t> )
{ try {
  BOOST_TEST_MESSAGE( "creating sparse::vector<std::ptrdiff_t>" );
  mtl::sparse::vector<std::ptrdiff_t> v
  {   1, 2, 2, 4, 5, 6, 7, 8, 9   };
  //BOOST_TEST_MESSAGE( v );
  BOOST_CHECK( v.frequent() == 2 );
  BOOST_CHECK( v.sparse() );
  BOOST_CHECK( v[3] == 4 );
  BOOST_CHECK( v[2] == 2 );
  BOOST_CHECK( std::size( v ) == 9 );
  BOOST_CHECK( v.amount() == 7 );
} MTL_CATCH }

BOOST_FIXTURE_TEST_CASE( test_sparse_vector, vector_fixture<std::ptrdiff_t> )
{ try {
  BOOST_TEST_MESSAGE( "checking v *= 1" );
  v *= 1;
  //BOOST_TEST_MESSAGE( s_m1 );
  BOOST_CHECK( v.frequent() == 2 );
  BOOST_CHECK( v.sparse() );
  BOOST_CHECK( v[3] == 4 );
  BOOST_CHECK( v[2] == 2 );
  BOOST_CHECK( std::size( v ) == 9 );
  BOOST_CHECK( v.amount() == 7 );
} MTL_CATCH }

BOOST_FIXTURE_TEST_CASE( test_sparse_vector, vector_fixture<std::ptrdiff_t> )
{ try {
  BOOST_TEST_MESSAGE( "pushing ..." );
  for( std::size_t i(0); i < 2; i++ )
	  v.push_back( 1 );
  //BOOST_TEST_MESSAGE( v );
  BOOST_CHECK( !v.sparse() );
  BOOST_CHECK( v.frequent() == MTL_NULLOPT );
  v.do_sparse();
  //BOOST_TEST_MESSAGE( v );
  BOOST_CHECK( v.frequent() == 1 );
  BOOST_CHECK( v[9] == 1 );
  BOOST_CHECK( v[10] == 1 );
  BOOST_CHECK( std::size( v ) == 11 );
  BOOST_CHECK( v.amount() == 8 );
} MTL_CATCH }

BOOST_FIXTURE_TEST_CASE( test_sparse_vector, vector_fixture<std::ptrdiff_t> )
{ try {
  BOOST_TEST_MESSAGE( "erasing ..." );
  for( std::size_t i(0); i < 9; i += 3 )
	  s_m1.erase( i );
  //BOOST_TEST_MESSAGE( s_m1 );
} MTL_CATCH }

} } }